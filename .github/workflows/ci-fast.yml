name: CI - Fast Validation

# This workflow is for quick CI testing only
# For full training and deployment, use main-pipeline.yml
on:
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  test-and-validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        # Clean up disk space before installing
        sudo apt-get clean
        sudo rm -rf /var/lib/apt/lists/*
        
        # Install with cleanup
        pip install --upgrade pip
        pip install --no-cache-dir -r requirements.txt
        
        # Clean up after installation
        pip cache purge
        find ~/.cache/pip -name "*.whl" -delete 2>/dev/null || true

    - name: Format code
      run: |
        make format

    - name: Test imports
      run: |
        python -c "
        import streamlit
        import torch
        import torchvision
        import autogluon.multimodal
        import scripts.preprocess
        import scripts.train_model
        import scripts.validate_model
        print('SUCCESS: All imports successful')
        "

    - name: Check for training data
      run: |
        if [ ! -d "data/pet_breeds" ] || [ -z "$(ls -A data/pet_breeds)" ]; then
          echo "WARNING: No training data found in data/pet_breeds/"
          echo "This is expected for CI testing. Training will be done in the main pipeline."
        else
          echo "SUCCESS: Training data found:"
          ls -la data/pet_breeds/
          echo "Total images:"
          find data/pet_breeds -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" | wc -l
        fi

    - name: Test Streamlit app
      run: |
        python -c "
        import app
        print('SUCCESS: Streamlit app imports successfully')
        "

    - name: Test model loading logic
      run: |
        python -c "
        from app import load_model, load_label_map
        model, model_status = load_model()
        label_map, label_status = load_label_map()
        
        print(f'Model status: {model_status}')
        print(f'Label map status: {label_status}')
        print('SUCCESS: Model loading logic works correctly')
        "

    - name: Test Docker build (without model)
      run: |
        echo "Testing Docker build without model..."
        # Create a temporary .dockerignore that excludes models for testing
        cp .dockerignore .dockerignore.backup
        echo "models/" >> .dockerignore
        
        docker build -t test-pet-classifier .
        echo "SUCCESS: Docker build successful"
        
        # Restore original .dockerignore
        mv .dockerignore.backup .dockerignore
        
    - name: Clean up Docker
      run: |
        docker system prune -f
        docker builder prune -f
    
    - name: CI summary
      run: |
        echo "CI Pipeline completed successfully!"
        echo "SUCCESS: Code formatting and tests passed"
        echo "SUCCESS: Streamlit app validated"
        echo "SUCCESS: Model loading logic tested"
        echo "SUCCESS: Docker build tested"
        echo ""
        echo "NOTE: This is a quick CI test only."
        echo "For full training and deployment, use the main-pipeline.yml workflow." 