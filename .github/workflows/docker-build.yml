name: Docker Build and Push

on:
  push:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      model_version:
        description: 'Model version to build (leave empty for latest)'
        required: false
        default: ''
      docker_tag:
        description: 'Custom Docker tag (optional)'
        required: false
        default: ''

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Determine model version
      id: model_version
      run: |
        if [ "${{ github.event.inputs.model_version }}" != "" ]; then
          echo "version=${{ github.event.inputs.model_version }}" >> $GITHUB_OUTPUT
          echo "Using manual model version: ${{ github.event.inputs.model_version }}"
        else
          # Try to find the latest model artifact
          echo "Looking for latest model artifact..."
          # For now, we'll use a timestamp-based version
          echo "version=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
          echo "Using auto-generated version: $(date +%Y%m%d-%H%M%S)"
        fi
      
    - name: Download model artifacts
      uses: actions/download-artifact@v4
      with:
        name: trained-model-${{ steps.model_version.outputs.version }}
        path: .
      
    - name: Verify model files for Docker build
      run: |
        echo "Verifying model files for Docker build..."
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        
        if [ -d "models/autogluon_model" ]; then
          echo "SUCCESS: Trained model directory found:"
          ls -la models/autogluon_model/
          echo "Model size:"
          du -sh models/autogluon_model/
          
          # Check for required files
          required_files=("model.ckpt" "config.yaml" "df_preprocessor.pkl")
          for file in "${required_files[@]}"; do
            if [ -f "models/autogluon_model/$file" ]; then
              echo "SUCCESS: $file found"
            else
              echo "ERROR: Required file $file not found!"
              exit 1
            fi
          done
        else
          echo "ERROR: No trained model found at models/autogluon_model/"
          echo "Directory structure:"
          find . -name "models" -type d
          exit 1
        fi
        
        if [ -f "data/metadata/label_map.pkl" ]; then
          echo "SUCCESS: Label map found"
        else
          echo "ERROR: No label map found!"
          exit 1
        fi
        
        echo "SUCCESS: All model files verified for Docker build"
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Generate Docker tags
      id: docker_tags
      run: |
        # Generate tags
        echo "latest=${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:latest" >> $GITHUB_OUTPUT
        echo "versioned=${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:${{ steps.model_version.outputs.version }}" >> $GITHUB_OUTPUT
        echo "commit=${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:${{ github.sha }}" >> $GITHUB_OUTPUT
        
        # Add custom tag if provided
        if [ "${{ github.event.inputs.docker_tag }}" != "" ]; then
          echo "custom=${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:${{ github.event.inputs.docker_tag }}" >> $GITHUB_OUTPUT
        fi
        
        # Show what we're building
        echo "Building Docker image with tags:"
        echo "- ${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:latest"
        echo "- ${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:${{ steps.model_version.outputs.version }}"
        echo "- ${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:${{ github.sha }}"
        if [ "${{ github.event.inputs.docker_tag }}" != "" ]; then
          echo "- ${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:${{ github.event.inputs.docker_tag }}"
        fi
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:latest
          ${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:${{ steps.model_version.outputs.version }}
          ${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:${{ github.sha }}
          ${{ github.event.inputs.docker_tag != '' && format('{0}/pet-breed-classifier:{1}', secrets.DOCKER_USERNAME, github.event.inputs.docker_tag) || '' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        build-args: |
          MODEL_VERSION=${{ steps.model_version.outputs.version }}
          GIT_COMMIT=${{ github.sha }}
    
    - name: Test Docker image
      run: |
        echo "Testing Docker image..."
        docker run --rm ${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:latest python -c "
        from autogluon.multimodal import MultiModalPredictor
        import os
        
        model_path = 'models/autogluon_model'
        if os.path.exists(model_path):
            predictor = MultiModalPredictor.load(model_path)
            print('SUCCESS: Model loaded successfully in Docker')
            print(f'Model path: {model_path}')
            print(f'Model files: {os.listdir(model_path)}')
        else:
            print('ERROR: Model not found in Docker image')
            exit(1)
        "
    
    - name: Test Streamlit app in Docker
      run: |
        echo "Testing Streamlit app in Docker..."
        docker run --rm -d --name test-streamlit ${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:latest
        sleep 10
        docker logs test-streamlit
        docker stop test-streamlit
        echo "SUCCESS: Streamlit app test completed"

  docker-build-summary:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    
    steps:
    - name: Docker build summary
      run: |
        echo "Docker build completed successfully!"
        echo "SUCCESS: Docker image built and pushed"
        echo "SUCCESS: Docker image tested"
        echo ""
        echo "Model Version: ${{ needs.build-and-push-docker.outputs.model-version }}"
        echo "Docker Images:"
        echo "- ${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:latest"
        echo "- ${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:${{ needs.build-and-push-docker.outputs.model-version }}"
        echo "- ${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:${{ github.sha }}"
        if [ "${{ github.event.inputs.docker_tag }}" != "" ]; then
          echo "- ${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:${{ github.event.inputs.docker_tag }}"
        fi
        echo ""
        echo "To run the Docker image:"
        echo "docker run -p 8501:8501 ${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:latest" 