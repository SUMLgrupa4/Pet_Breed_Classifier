name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  test-and-validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Format code
      run: |
        make format

    - name: Test imports
      run: |
        python -c "
        import streamlit
        import torch
        import torchvision
        import autogluon.multimodal
        import scripts.preprocess
        import scripts.train_model
        import scripts.validate_model
        print('‚úÖ All imports successful')
        "

    - name: Check for trained model
      run: |
        if [ ! -d "models" ] || [ -z "$(ls -A models)" ]; then
          echo "‚ùå No trained model found in models/ directory!"
          echo "Please train the model locally and push it to the repository."
          exit 1
        fi
        echo "‚úÖ Trained model found:"
        ls -la models/

    - name: Test model loading
      run: |
        python -c "
        import autogluon.multimodal
        predictor = autogluon.multimodal.MultiModalPredictor.load('models/autogluon_model')
        print('‚úÖ Model loaded successfully')
        "

    - name: Test Streamlit app
      run: |
        python -c "
        import app
        print('‚úÖ Streamlit app imports successfully')
        "

  build-and-deploy:
    needs: test-and-validate
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:latest
          ${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
    
    - name: Clean up Docker
      run: |
        docker system prune -f
        docker builder prune -f
    
    - name: Test Docker image
      run: |
        docker run --rm ${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:latest python -c "import streamlit; print('‚úÖ Streamlit imported successfully')"
    
    - name: Deployment summary
      run: |
        echo "üéâ Pipeline completed successfully!"
        echo "‚úÖ Code formatting and tests passed"
        echo "‚úÖ Trained model validated"
        echo "‚úÖ Docker image built and pushed"
        echo "‚úÖ Ready for deployment"
        echo ""
        echo "üìä Using pre-trained model from models/"
        echo "üê≥ Docker image: ${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:latest"
        echo "üîó Pull command: docker pull ${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:latest" 