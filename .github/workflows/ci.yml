name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  test-and-train:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Format code
      run: |
        make format

    - name: Test imports
      run: |
        python -c "
        import streamlit
        import torch
        import torchvision
        import autogluon.multimodal
        import scripts.preprocess
        import scripts.train_model
        import scripts.validate_model
        print('‚úÖ All imports successful')
        "

    - name: Create directories
      run: |
        mkdir -p models
        mkdir -p outputs
        mkdir -p data/pet_breeds
        mkdir -p data/metadata

    - name: Fetch training data
      run: |
        python scripts/fetch_data.py
      env:
        KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
        KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}

    - name: Check dataset exists
      run: |
        if [ ! -d "data/pet_breeds" ] || [ -z "$(ls -A data/pet_breeds)" ]; then
          echo "Dataset not found! Please ensure the dataset is available."
          exit 1
        fi
        echo "Dataset found, proceeding with training..."
        ls -la data/pet_breeds/

    - name: Train model
      run: |
        python run_pipeline.py
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Validate model artifacts
      run: |
        if [ ! -d "models" ] || [ -z "$(ls -A models)" ]; then
          echo "Model artifacts not created!"
          exit 1
        fi
        echo "Model artifacts found:"
        ls -la models/

    - name: Upload model artifacts
      uses: actions/upload-artifact@v4
      with:
        name: trained-model-${{ github.sha }}
        path: models/
        retention-days: 30

    - name: Upload outputs
      uses: actions/upload-artifact@v4
      with:
        name: training-outputs-${{ github.sha }}
        path: outputs/
        retention-days: 30

  build-and-deploy:
    needs: test-and-train
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download model artifacts
      uses: actions/download-artifact@v4
      with:
        name: trained-model-${{ github.sha }}
        path: models/
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:latest
          ${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm ${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:latest python -c "import streamlit; print('‚úÖ Streamlit imported successfully')"
    
    - name: Deployment summary
      run: |
        echo "üéâ Pipeline completed successfully!"
        echo "‚úÖ Code formatting and tests passed"
        echo "‚úÖ Model training completed"
        echo "‚úÖ Docker image built and pushed"
        echo "‚úÖ Ready for deployment"
        echo ""
        echo "üìä Model artifacts saved to models/"
        echo "üê≥ Docker image: ${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:latest"
        echo "üîó Pull command: docker pull ${{ secrets.DOCKER_USERNAME }}/pet-breed-classifier:latest" 